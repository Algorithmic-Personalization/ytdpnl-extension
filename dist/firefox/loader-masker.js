(()=>{"use strict";var e=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var o,r,l=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(o=l.next()).done;)a.push(o.value)}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return a},t=function(e,t,n){if(n||2===arguments.length)for(var o,r=0,l=t.length;r<l;r++)!o&&r in t||(o||(o=Array.prototype.slice.call(t,0,r)),o[r]=t[r]);return e.concat(o||Array.prototype.slice.call(t))},n=function(){return"1"===localStorage.getItem("debug")},o=function(){for(var o=[],r=0;r<arguments.length;r++)o[r]=arguments[r];n()&&("error"!==o[0]?console.log.apply(console,t([],e(o),!1)):console.error.apply(console,t([],e(o.slice(1)),!1)))},r=(function(){if(navigator.userAgent.includes("Chrome"));}(),"ytdpnl-loader-mask"),l=function(e,t,n,o){return new(n||(n=Promise))((function(r,l){function a(e){try{c(o.next(e))}catch(e){l(e)}}function i(e){try{c(o.throw(e))}catch(e){l(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}c((o=o.apply(e,t||[])).next())}))},a=function(e,t){var n,o,r,l,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;l&&(l=0,i[0]&&(a=0)),a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};l(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return"/"!==window.location.pathname?[3,2]:(o("installing loader mask because on home page"),[4,l(void 0,void 0,void 0,(function(){return a(this,(function(e){return[2,new Promise((function(e){var t=function(){return Boolean(document.body)};if(t())e();else{var n=new MutationObserver((function(){t()&&(n.disconnect(),e())}));n.observe(document.documentElement,{childList:!0,subtree:!0})}}))]}))}))]);case 1:return e.sent(),function(){var e,t=document.createElement("div");if(t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.backgroundColor="white",t.style.zIndex="100000",t.id=r,n()){t.style.opacity=null!==(e=localStorage.getItem("opacity"))&&void 0!==e?e:"1";var o=document.createElement("button");o.type="button",o.style.margin="42px",o.textContent="Remove loader mask (this is only visible in debug mode)",o.addEventListener("click",(function(e){e.preventDefault(),t.remove()})),t.appendChild(o);var l=document.createElement("p");l.style.display="block",l.style.margin="42px",l.style.border="1px solid #ccc",l.style.backgroundColor="white",l.style.padding="12px",l.style.width="fit-content",l.style.fontWeight="bold",l.style.fontSize="20px",l.textContent='You can reduce the opacity of the mask by setting the variable "opacity" in localStorage. The value should be a number between 0 and 1.',t.appendChild(l)}document.body.appendChild(t)}(),[3,3];case 2:o("not installing loader mask because not on home page"),e.label=3;case 3:return[2]}}))})).catch((function(e){o("error","failed to start loader:",e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,