(()=>{"use strict";var e=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},t=function(e,t,r){if(r||2===arguments.length)for(var n,o=0,a=t.length;o<a;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))},r=function(){return"1"===localStorage.getItem("debug")},n=function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];r()&&("error"!==n[0]?console.log.apply(console,t([],e(n),!1)):console.error.apply(console,t([],e(n.slice(1)),!1)))},o=(function(){if(navigator.userAgent.includes("Chrome"));}(),function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{l(n.next(e))}catch(e){a(e)}}function c(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,c)}l((n=n.apply(e,t||[])).next())}))}),a=function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(l){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(i=0)),i;)try{if(r=1,n&&(o=2&c[0]?n.return:c[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,c[1])).done)return o;switch(n=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,n=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],n=0}finally{r=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}},i=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},c=function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};chrome.tabs.onActivated.addListener((function(e){var t,r;console.log("New tab:",e);var n=e.tabId;if(void 0!==n){chrome.tabs.sendMessage(n,{type:"your-tab-is-active",tabId:e.tabId},(function(e){console.log("Tab ".concat(n," replied:"),e)}));var o=function(t){t!==n&&chrome.tabs.sendMessage(t,{type:"your-tab-is-not-active",tabId:e.tabId},(function(e){console.log("Tab ".concat(t," replied:"),e)}))};try{for(var a=c(l),i=a.next();!i.done;i=a.next())o(i.value)}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}}}));var l=new Set;chrome.tabs.onRemoved.addListener((function(e){console.log("Tab removed:",e),l.delete(e)})),o(void 0,void 0,void 0,(function(){var e,t,r,u,f,s,d,y,b;return a(this,(function(v){switch(v.label){case 0:return[4,Promise.all([o(void 0,void 0,void 0,(function(){return a(this,(function(e){return[2,new Promise((function(e,t){chrome.tabs.query({},(function(r){chrome.runtime.lastError?t(chrome.runtime.lastError):e(r)}))}))]}))})),o(void 0,void 0,void 0,(function(){return a(this,(function(e){return[2,new Promise((function(e,t){chrome.tabs.query({active:!0,lastFocusedWindow:!0},(function(r){var n=i(r,1)[0];chrome.runtime.lastError?t(chrome.runtime.lastError):e(n)}))}))]}))}))])];case 1:e=i.apply(void 0,[v.sent(),2]),t=e[0],r=e[1],console.log("Initial tabs:",t),u=function(e){if(void 0===e)return"continue";l.add(e),e===(null==r?void 0:r.id)?(n("active tab:",r),chrome.tabs.sendMessage(e,{type:"your-tab-is-active",tabId:e},(function(t){console.log("tab ".concat(e," replied:"),t)}))):chrome.tabs.sendMessage(e,{type:"your-tab-is-not-active",tabId:e},(function(t){console.log("tab ".concat(e," replied:"),t)}))};try{for(f=c(t),s=f.next();!s.done;s=f.next())d=s.value.id,u(d)}catch(e){y={error:e}}finally{try{s&&!s.done&&(b=f.return)&&b.call(f)}finally{if(y)throw y.error}}return[2]}}))})).catch((function(e){n("error","failed to start background script:",e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,